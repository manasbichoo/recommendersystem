/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java'
}

defaultTasks 'clean', 'build'

dependencies {
   
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    implementation group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.3.1' 
    implementation group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.3.1'
    implementation group: 'org.apache.spark', name: 'spark-launcher_2.11', version: '2.3.1'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    implementation group: 'org.apache.spark', name: 'spark-mllib_2.11', version: '2.3.1'
    implementation group: 'org.apache.livy', name: 'livy-client-http', version: '0.5.0-incubating'
    implementation 'org.openjdk.jmh:jmh-core:1.20'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.20'
    implementation 'com.github.sh0nk:matplotlib4j:0.4.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.7'
    implementation 'org.apache.commons:commons-lang3:3.8'
    
    // Kafka, Spark Streaming
     implementation 'org.apache.spark:spark-streaming-kafka-0-10_2.11:2.3.1'
     
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1' 
    
    
       

}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// Task to run a particular recommendatioin engine using SparkLauncher API
task runRecommendationEngine(type: JavaExec) {
   classpath = sourceSets.main.runtimeClasspath
   main = project.hasProperty('mainClass') ? project.property('mainClass') : 'co.hc.ml.recommendation.HCRecommendationJob'
   println 'Using main class - '+main
   println classpath;

}


// Task to submit a job to spark using spark-submit
task submitToSpark(type: Exec, dependsOn: [clean, test, ':build']){

    doFirst {
        mkdir "${rootDir}/logs"
    }
    
    dependsOn 'clean'
    dependsOn 'build'
    tasks.findByName('build').mustRunAfter 'clean'
    executable = new File("${rootDir}", "hc_spark_submit.sh") 
   // standardOutput = new BufferedOutputStream ( new FileOutputStream("${rootDir}/logs/spark_submit_stdout.log"))
   // errorOutput = new BufferedOutputStream ( new FileOutputStream("${rootDir}/logs/spark_submit_stderr.log"))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}



